os: linux
dist: focal
language: python
python:
  - 3.8
services:
  - docker
addons:
  chrome: stable
env:
  - STAGE=prod
  - STAGE=karma
  - STAGE=cypress

script:
  # version is "x.y.0", convert in x.y
  - export CURRENT_VERSION=$(grep '"version"' src/package.json | awk {'print $2'} | tr -d '", ' | awk -F. {'print $1 "." $2'})
  - pip3 install --upgrade git+https://github.com/rapydo/do.git@${CURRENT_VERSION}
  - auth_services=(postgres mysql neo4j neo4j mongo)
  - AUTH=${auth_services[$(($RANDOM % ${#auth_services[@]}))]}
  - echo "Selected random authentication service = ${AUTH}"
  - mkdir rapydo_tests
  - cd rapydo_tests
  - rapydo --testing create prj --auth ${AUTH} --frontend angular --origin-url https://your_remote_git/your_project.git
  - >
    if [[ "$STAGE" == "karma" ]]; then

      rapydo --testing init;
      rapydo -s frontend pull;
      rapydo -s frontend start;
      sleep 5;
      rapydo shell frontend "yarn install" || travis_terminate 1;
      rapydo shell frontend "reload-types" || travis_terminate 1;
      rapydo shell frontend "yarn run test:single" || travis_terminate 1;
      cp data/prj/karma/lcov.info .;
      travis_retry bash <(curl -s https://codecov.io/bash) -R submodules/rapydo-angular;

    elif [[ "$STAGE" == "prod" ]]; then

      rapydo --prod init;
      rapydo pull;
      rapydo -s frontend,proxy start;
      rapydo dump;
      rapydo -s frontend logs --follow;
      docker-compose logs --tail 2 frontend 2>&1 | grep "files have been compressed.";
      docker-compose logs --tail 20 proxy;
      curl --insecure -X GET https://localhost;
      npm install -g seespee cypress;
      seespee --level 1 --validate https://localhost || travis_terminate 1;

      opt="--silent --head --insecure -X GET https://localhost";

      # A lot of urls serve the index.html, so that the expected response is:
      # 200 OK, content-type html, no-cache and CSP enabled

      echo -e "\n**** Testing index.html HTTP response ****";
      curl $opt | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/ | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/index.html | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/app | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/app/ | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/app/index.html | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/app/anything | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/public | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/public/ | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/public/index.html | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/public/anything | grep -E "^HTTP/.+ 200" || travis_terminate 1;

      echo -e "\n**** Testing index.html cache-control ****";
      curl $opt | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/ | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/index.html | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/app | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/app/ | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/app/index.html | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/app/anything | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/public | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/public/ | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/public/index.html | grep "cache-control: no-store" || travis_terminate 1;
      curl $opt/public/anything | grep "cache-control: no-store" || travis_terminate 1;

      echo -e "\n**** Testing index.html CSP header ****";
      curl $opt | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/ | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/index.html | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/app | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/app/ | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/app/index.html | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/app/anything | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/public | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/public/ | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/public/index.html | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/public/anything | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;

      echo -e "\n**** Testing index.html Content-Type ****";
      curl $opt | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/ | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/index.html | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/app | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/app/ | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/app/index.html | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/app/anything | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/public | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/public/ | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/public/index.html | grep -i "Content-Type: text/html" || travis_terminate 1;
      curl $opt/public/anything | grep -i "Content-Type: text/html" || travis_terminate 1;

      echo -e "\n**** Testing index.html gzip encoding ****";
      curl $opt --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/app --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/app/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/app/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/app/anything --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/public --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/public/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/public/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;
      curl $opt/public/anything --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;

      # unrecognized patterns have to respond with a 404
      echo -e "\n**** Testing invalid path ****";
      curl $opt/anything | grep -E "^HTTP/.+ 404";

      # favicon is expected to be found with content-type image/x-icon and CSP Enabled
      # cache is expected to be set a 1 month (2592000)
      echo -e "\n**** Testing favicon.ico ****";
      curl $opt/app/custom/assets/favicon/favicon.ico | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/app/custom/assets/favicon/favicon.ico | grep "cache-control: max-age=2592000" || travis_terminate 1;
      curl $opt/app/custom/assets/favicon/favicon.ico | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/app/custom/assets/favicon/favicon.ico | grep -i "Content-Type: image/x-icon" || travis_terminate 1;
      curl $opt/app/custom/assets/favicon/favicon.ico  --header 'accept-encoding: gzip' | grep "content-encoding: gzip" || travis_terminate 1;

      # asset names are dinamically generated at build type... extract it from the index.html..
      asset=`curl --silent --insecure -X GET https://localhost | grep -o "styles\..*.css"` || travis_terminate 1;

      echo -e "\n**** Testing ${asset} ****";
      # assets are expected to be found with proper content-type and CSP Enabled
      # cache is expected to be set a 1 year (31557600)
      curl $opt/$asset | grep -E "^HTTP/.+ 200" || travis_terminate 1;
      curl $opt/$asset | grep "cache-control: max-age=31557600" || travis_terminate 1;
      curl $opt/$asset | grep -i "Content-Security-Policy: frame-ancestors" || travis_terminate 1;
      curl $opt/$asset | grep -i "Content-Type: text/css" || travis_terminate 1;
      curl $opt/$asset --header 'accept-encoding: gzip' | grep "content-encoding: gzip || travis_terminate 1";

      echo "{}" > cypress.json
      cypress run --browser chrome --config integrationFolder=. --spec submodules/rapydo-angular/cypress/prod-test.js

    elif [[ "$STAGE" == "cypress" ]]; then

      rapydo --testing init;
      rapydo add component sink;
      cp submodules/do/controller/templates/testing_sink.html.j2 projects/prj/frontend/app/components/sink/sink.html;
      cp submodules/do/controller/templates/testing_sink.ts.j2 projects/prj/frontend/app/components/sink/sink.ts;

      cd submodules/rapydo-angular;
      export COMMIT_INFO_BRANCH="$(git rev-parse --abbrev-ref HEAD)";
      export COMMIT_INFO_MESSAGE="$(git show -s --pretty=%B)";
      export COMMIT_INFO_SUBJECT="$(git show -s --pretty=%s)";
      export COMMIT_INFO_BODY="$(git show -s --pretty=%b)";
      export COMMIT_INFO_EMAIL="$(git show -s --pretty=%ae)";
      export COMMIT_INFO_AUTHOR="$(git show -s --pretty=%an)";
      export COMMIT_INFO_SHA="$(git show -s --pretty=%H)";
      export COMMIT_INFO_TIMESTAMP="$(git show -s --pretty=%ct)";
      export COMMIT_INFO_REMOTE="$(git config --get remote.origin.url)";
      export CYPRESS_GROUP="$(git show -s --pretty=%H)";
      cd -;

      rapydo pull;
      rapydo -e PROJECT_TITLE="Your ${AUTH} Project" start;
      rapydo shell backend 'restapi wait' && sleep 20;
      rapydo shell backend --detach "restapi launch";
      rapydo shell frontend "yarn install" || travis_terminate 1;
      rapydo shell frontend "reload-types" || travis_terminate 1;
      rapydo logs;
      rapydo shell frontend "yarn run cypress:start" || travis_terminate 1;
      rapydo shell frontend "npx nyc --all report --reporter=lcov" || travis_terminate 1;
      cp data/prj/karma/lcov.info .;
      travis_retry bash <(curl -s https://codecov.io/bash) -R submodules/rapydo-angular;

    fi

notifications:
  email: false
  slack:
    rooms:
      secure: FPS8zIxMpBBE4RvU/aGIaXrBM41WosjGdVEaEOLtws5ofoK28is4QNkeI1WyQoXcij7noPfcGY+TSacgFr7/MQP2LzO0bo77WIQYab1vFjM5pFtgll8nBINXTy84ND6oOKOvD04wnrnUcD5X9TlITtI5/brgeb91Fm21jWnbsd8iYr0PfbqfvuE6HG7MDKzE5IbyIE1b3IltZyRwnH1nMhCTohCqiK3l8JwxY3DGV72kWGPF6uKXV6J087F1exRBCEfaJAIkCM14Sw6KFX5ATAfjXmRm3phR4Iv2NpOqdHAwOnWHqbXtNkONvN8/G/5xmGQ1BQJVpVxzCVw8fphToEPbyjqIJ6ZE+zKKl7TRAOCWcwX8DpROfBtLXi04g5X5DS7+ZFL1xnb0R6/DC8CsvPWe6096UfzTvpFQANeJ6pK5YKZECzU5/FKUMx/F6leLRWIqbkkkrXmhvjZ29GABx4zpWfAqU1sj5K7XG6OcihGnXXgdViDmqYyC7sxln+MMDM5xMZSRS/5eEusSMn49crmc5DidyJiZo7r2uS5fHXQ3dBVFYv240g7bc9QJHk6DbnCSz6zPfjUQbauhjJt9+akot0AX6yhwwwusslctCxRTdzvPzdy8BkQ7rHJbjCnVLlP30+uEUpwp8pRf8rq8kOSuF6o+YVYlzA8v+O649a8=
    on_success: change # default: always
    on_failure: always # default: always
